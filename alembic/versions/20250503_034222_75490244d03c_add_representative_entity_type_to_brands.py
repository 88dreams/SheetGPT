"""Add representative_entity_type to brands

Revision ID: 75490244d03c
Revises: 20250422_225930_add_deleted_at
Create Date: 2025-05-03 03:42:22.732142+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '75490244d03c'
down_revision: Union[str, None] = '20250422_225930_add_deleted_at'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('system_metadata')
    op.drop_index('ix_linkedin_connections_id', table_name='linkedin_connections')
    op.drop_index('ix_linkedin_connections_linkedin_profile_id', table_name='linkedin_connections')
    op.drop_index('ix_linkedin_connections_user_id', table_name='linkedin_connections')
    op.drop_table('linkedin_connections')
    op.drop_index('ix_linkedin_accounts_id', table_name='linkedin_accounts')
    op.drop_index('ix_linkedin_accounts_user_id', table_name='linkedin_accounts')
    op.drop_table('linkedin_accounts')
    op.drop_index('ix_brand_connections_brand_id', table_name='brand_connections')
    op.drop_index('ix_brand_connections_id', table_name='brand_connections')
    op.drop_index('ix_brand_connections_user_id', table_name='brand_connections')
    op.drop_table('brand_connections')
    op.add_column('brands', sa.Column('representative_entity_type', sa.String(length=50), nullable=True))
    op.alter_column('brands', 'partner',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('brands', 'partner_relationship',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.create_index(op.f('ix_brands_representative_entity_type'), 'brands', ['representative_entity_type'], unique=False)
    op.drop_constraint('uq_broadcast_rights', 'broadcast_rights', type_='unique')
    op.drop_index('uq_broadcast_rights_idx', table_name='broadcast_rights', postgresql_where='(division_conference_id IS NOT NULL)')
    op.drop_index('uq_broadcast_rights_null_idx', table_name='broadcast_rights', postgresql_where='(division_conference_id IS NULL)')
    op.alter_column('contact_brand_associations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contact_brand_associations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contacts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contacts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_foreign_key(None, 'game_broadcasts', 'brands', ['production_company_id'], ['id'])
    op.drop_index('ix_stadiums_name', table_name='stadiums')
    op.create_index('ix_stadiums_name', 'stadiums', ['name'], unique=False)
    op.drop_index('ix_teams_division_conference_id', table_name='teams')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('ix_teams_division_conference_id', 'teams', ['division_conference_id'], unique=False)
    op.drop_index('ix_stadiums_name', table_name='stadiums')
    op.create_index('ix_stadiums_name', 'stadiums', ['name'], unique=True)
    op.drop_constraint(None, 'game_broadcasts', type_='foreignkey')
    op.alter_column('contacts', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contacts', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contact_brand_associations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('contact_brand_associations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index('uq_broadcast_rights_null_idx', 'broadcast_rights', ['entity_type', 'entity_id', 'broadcast_company_id'], unique=True, postgresql_where='(division_conference_id IS NULL)')
    op.create_index('uq_broadcast_rights_idx', 'broadcast_rights', ['entity_type', 'entity_id', 'broadcast_company_id', 'division_conference_id'], unique=True, postgresql_where='(division_conference_id IS NOT NULL)')
    op.create_unique_constraint('uq_broadcast_rights', 'broadcast_rights', ['entity_type', 'entity_id', 'broadcast_company_id', 'division_conference_id'])
    op.drop_index(op.f('ix_brands_representative_entity_type'), table_name='brands')
    op.alter_column('brands', 'partner_relationship',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('brands', 'partner',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.drop_column('brands', 'representative_entity_type')
    op.create_table('brand_connections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('brand_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('first_degree_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('second_degree_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], name='brand_connections_brand_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='brand_connections_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='brand_connections_pkey'),
    sa.UniqueConstraint('user_id', 'brand_id', name='uq_user_brand')
    )
    op.create_index('ix_brand_connections_user_id', 'brand_connections', ['user_id'], unique=False)
    op.create_index('ix_brand_connections_id', 'brand_connections', ['id'], unique=False)
    op.create_index('ix_brand_connections_brand_id', 'brand_connections', ['brand_id'], unique=False)
    op.create_table('linkedin_accounts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('linkedin_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_synced', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='linkedin_accounts_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='linkedin_accounts_pkey')
    )
    op.create_index('ix_linkedin_accounts_user_id', 'linkedin_accounts', ['user_id'], unique=True)
    op.create_index('ix_linkedin_accounts_id', 'linkedin_accounts', ['id'], unique=False)
    op.create_table('linkedin_connections',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('linkedin_profile_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('connection_degree', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='linkedin_connections_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='linkedin_connections_pkey'),
    sa.UniqueConstraint('user_id', 'linkedin_profile_id', name='uq_user_profile')
    )
    op.create_index('ix_linkedin_connections_user_id', 'linkedin_connections', ['user_id'], unique=False)
    op.create_index('ix_linkedin_connections_linkedin_profile_id', 'linkedin_connections', ['linkedin_profile_id'], unique=False)
    op.create_index('ix_linkedin_connections_id', 'linkedin_connections', ['id'], unique=False)
    op.create_table('system_metadata',
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('key', name='system_metadata_pkey')
    )
    # ### end Alembic commands ### 