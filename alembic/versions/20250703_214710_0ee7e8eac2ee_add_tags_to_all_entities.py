"""Add tags to all entities

Revision ID: 0ee7e8eac2ee
Revises: e8684c232706
Create Date: 2025-07-03 21:47:10.593226+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0ee7e8eac2ee'
down_revision: Union[str, None] = 'e8684c232706'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# List of all tables that inherit from TimestampedBase and will get the 'tags' column
TABLES_WITH_TAGS = [
    'brands', 'broadcast_rights', 'contact_brand_associations', 'contacts',
    'conversations', 'data_change_history', 'data_columns', 'divisions_conferences',
    'game_broadcasts', 'games', 'league_executives', 'leagues', 'messages',
    'players', 'production_services', 'stadiums', 'structured_data',
    'team_ownerships', 'team_records', 'teams', 'users'
]

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('brands', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_brands_company_type'), 'brands', ['company_type'], unique=False)
    op.create_index('ix_brands_industry', 'brands', ['industry'], unique=False)
    op.create_index(op.f('ix_brands_name'), 'brands', ['name'], unique=False)
    op.create_index(op.f('ix_brands_representative_entity_type'), 'brands', ['representative_entity_type'], unique=False)
    op.add_column('broadcast_rights', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'broadcast_rights', 'brands', ['broadcast_company_id'], ['id'])
    op.create_foreign_key(None, 'broadcast_rights', 'divisions_conferences', ['division_conference_id'], ['id'])
    op.add_column('contact_brand_associations', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_contact_brand_associations_brand_id'), 'contact_brand_associations', ['brand_id'], unique=False)
    op.create_index(op.f('ix_contact_brand_associations_contact_id'), 'contact_brand_associations', ['contact_id'], unique=False)
    op.create_unique_constraint('uq_contact_brand', 'contact_brand_associations', ['contact_id', 'brand_id'])
    op.create_foreign_key(None, 'contact_brand_associations', 'contacts', ['contact_id'], ['id'])
    op.create_foreign_key(None, 'contact_brand_associations', 'brands', ['brand_id'], ['id'])
    op.add_column('contacts', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_contacts_company'), 'contacts', ['company'], unique=False)
    op.create_index('ix_contacts_email', 'contacts', ['email'], unique=False)
    op.create_index('ix_contacts_first_name', 'contacts', ['first_name'], unique=False)
    op.create_index(op.f('ix_contacts_last_name'), 'contacts', ['last_name'], unique=False)
    op.create_index(op.f('ix_contacts_user_id'), 'contacts', ['user_id'], unique=False)
    op.create_foreign_key(None, 'contacts', 'users', ['user_id'], ['id'])
    op.add_column('conversations', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'conversations', 'users', ['user_id'], ['id'])
    op.add_column('data_change_history', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'data_change_history', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'data_change_history', 'structured_data', ['structured_data_id'], ['id'])
    op.add_column('data_columns', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'data_columns', 'structured_data', ['structured_data_id'], ['id'])
    op.add_column('divisions_conferences', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index('ix_divisions_conferences_name', 'divisions_conferences', ['name'], unique=False)
    op.create_index(op.f('ix_divisions_conferences_nickname'), 'divisions_conferences', ['nickname'], unique=False)
    op.create_unique_constraint('uq_division_conference_name_per_league', 'divisions_conferences', ['league_id', 'name'])
    op.create_foreign_key(None, 'divisions_conferences', 'leagues', ['league_id'], ['id'])
    op.add_column('game_broadcasts', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'game_broadcasts', 'brands', ['broadcast_company_id'], ['id'])
    op.create_foreign_key(None, 'game_broadcasts', 'brands', ['production_company_id'], ['id'])
    op.create_foreign_key(None, 'game_broadcasts', 'games', ['game_id'], ['id'])
    op.add_column('games', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'games', 'stadiums', ['stadium_id'], ['id'])
    op.create_foreign_key(None, 'games', 'teams', ['home_team_id'], ['id'])
    op.create_foreign_key(None, 'games', 'leagues', ['league_id'], ['id'])
    op.create_foreign_key(None, 'games', 'teams', ['away_team_id'], ['id'])
    op.add_column('league_executives', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'league_executives', 'leagues', ['league_id'], ['id'])
    op.add_column('leagues', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_leagues_name'), 'leagues', ['name'], unique=True)
    op.create_index(op.f('ix_leagues_nickname'), 'leagues', ['nickname'], unique=False)
    op.create_unique_constraint('uq_leagues_name', 'leagues', ['name'])
    op.add_column('messages', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'messages', 'conversations', ['conversation_id'], ['id'])
    op.add_column('players', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_players_team_id'), 'players', ['team_id'], unique=False)
    op.create_foreign_key(None, 'players', 'teams', ['team_id'], ['id'])
    op.add_column('production_services', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_production_services_secondary_brand_id'), 'production_services', ['secondary_brand_id'], unique=False)
    op.create_foreign_key(None, 'production_services', 'brands', ['secondary_brand_id'], ['id'])
    op.create_foreign_key(None, 'production_services', 'brands', ['production_company_id'], ['id'])
    op.add_column('stadiums', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_unique_constraint('uq_stadiums_name', 'stadiums', ['name'])
    op.create_foreign_key(None, 'stadiums', 'brands', ['host_broadcaster_id'], ['id'])
    op.add_column('structured_data', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'structured_data', 'conversations', ['conversation_id'], ['id'])
    op.add_column('team_ownerships', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'team_ownerships', 'teams', ['team_id'], ['id'])
    op.add_column('team_records', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_foreign_key(None, 'team_records', 'teams', ['team_id'], ['id'])
    op.add_column('teams', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_unique_constraint('uq_teams_name', 'teams', ['name'])
    op.create_foreign_key(None, 'teams', 'stadiums', ['stadium_id'], ['id'])
    op.create_foreign_key(None, 'teams', 'leagues', ['league_id'], ['id'])
    op.create_foreign_key(None, 'teams', 'divisions_conferences', ['division_conference_id'], ['id'])
    op.add_column('users', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=True))
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    
    # Manually added command to backfill the new 'tags' column for existing data
    for table_name in TABLES_WITH_TAGS:
        op.execute(f"UPDATE {table_name} SET tags = '[\"SPORTS\"]' WHERE tags IS NULL")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_column('users', 'tags')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint(None, 'teams', type_='foreignkey')
    op.drop_constraint('uq_teams_name', 'teams', type_='unique')
    op.drop_column('teams', 'tags')
    op.drop_constraint(None, 'team_records', type_='foreignkey')
    op.drop_column('team_records', 'tags')
    op.drop_constraint(None, 'team_ownerships', type_='foreignkey')
    op.drop_column('team_ownerships', 'tags')
    op.drop_constraint(None, 'structured_data', type_='foreignkey')
    op.drop_column('structured_data', 'tags')
    op.drop_constraint(None, 'stadiums', type_='foreignkey')
    op.drop_constraint('uq_stadiums_name', 'stadiums', type_='unique')
    op.drop_column('stadiums', 'tags')
    op.drop_constraint(None, 'production_services', type_='foreignkey')
    op.drop_constraint(None, 'production_services', type_='foreignkey')
    op.drop_index(op.f('ix_production_services_secondary_brand_id'), table_name='production_services')
    op.drop_column('production_services', 'tags')
    op.drop_constraint(None, 'players', type_='foreignkey')
    op.drop_index(op.f('ix_players_team_id'), table_name='players')
    op.drop_column('players', 'tags')
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.drop_column('messages', 'tags')
    op.drop_constraint('uq_leagues_name', 'leagues', type_='unique')
    op.drop_index(op.f('ix_leagues_nickname'), table_name='leagues')
    op.drop_index(op.f('ix_leagues_name'), table_name='leagues')
    op.drop_column('leagues', 'tags')
    op.drop_constraint(None, 'league_executives', type_='foreignkey')
    op.drop_column('league_executives', 'tags')
    op.drop_constraint(None, 'games', type_='foreignkey')
    op.drop_constraint(None, 'games', type_='foreignkey')
    op.drop_constraint(None, 'games', type_='foreignkey')
    op.drop_constraint(None, 'games', type_='foreignkey')
    op.drop_column('games', 'tags')
    op.drop_constraint(None, 'game_broadcasts', type_='foreignkey')
    op.drop_constraint(None, 'game_broadcasts', type_='foreignkey')
    op.drop_constraint(None, 'game_broadcasts', type_='foreignkey')
    op.drop_column('game_broadcasts', 'tags')
    op.drop_constraint(None, 'divisions_conferences', type_='foreignkey')
    op.drop_constraint('uq_division_conference_name_per_league', 'divisions_conferences', type_='unique')
    op.drop_index(op.f('ix_divisions_conferences_nickname'), table_name='divisions_conferences')
    op.drop_index('ix_divisions_conferences_name', table_name='divisions_conferences')
    op.drop_column('divisions_conferences', 'tags')
    op.drop_constraint(None, 'data_columns', type_='foreignkey')
    op.drop_column('data_columns', 'tags')
    op.drop_constraint(None, 'data_change_history', type_='foreignkey')
    op.drop_constraint(None, 'data_change_history', type_='foreignkey')
    op.drop_column('data_change_history', 'tags')
    op.drop_constraint(None, 'conversations', type_='foreignkey')
    op.drop_column('conversations', 'tags')
    op.drop_constraint(None, 'contacts', type_='foreignkey')
    op.drop_index(op.f('ix_contacts_user_id'), table_name='contacts')
    op.drop_index(op.f('ix_contacts_last_name'), table_name='contacts')
    op.drop_index('ix_contacts_first_name', table_name='contacts')
    op.drop_index('ix_contacts_email', table_name='contacts')
    op.drop_index(op.f('ix_contacts_company'), table_name='contacts')
    op.drop_column('contacts', 'tags')
    op.drop_constraint(None, 'contact_brand_associations', type_='foreignkey')
    op.drop_constraint(None, 'contact_brand_associations', type_='foreignkey')
    op.drop_constraint('uq_contact_brand', 'contact_brand_associations', type_='unique')
    op.drop_index(op.f('ix_contact_brand_associations_contact_id'), table_name='contact_brand_associations')
    op.drop_index(op.f('ix_contact_brand_associations_brand_id'), table_name='contact_brand_associations')
    op.drop_column('contact_brand_associations', 'tags')
    op.drop_constraint(None, 'broadcast_rights', type_='foreignkey')
    op.drop_constraint(None, 'broadcast_rights', type_='foreignkey')
    op.drop_column('broadcast_rights', 'tags')
    op.drop_index(op.f('ix_brands_representative_entity_type'), table_name='brands')
    op.drop_index(op.f('ix_brands_name'), table_name='brands')
    op.drop_index('ix_brands_industry', table_name='brands')
    op.drop_index(op.f('ix_brands_company_type'), table_name='brands')
    op.drop_column('brands', 'tags')
    # ### end Alembic commands ### 